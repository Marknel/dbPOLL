//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Entity Developer tool using LinqConnect template.
// Code is generated on: 5/27/2011 3:10:10 AM
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System;
using System.Data.Linq;
using System.Data.Linq.Mapping;
using System.Data;
using System.ComponentModel;
using System.Collections.Generic;
using System.Reflection;
using System.Linq;
using System.Linq.Expressions;

namespace DBPOLLContext
{

    [System.Data.Linq.Mapping.DatabaseAttribute(Name = "CSSE3004GG")]
    [ProviderAttribute(typeof(Devart.Data.Oracle.Linq.Provider.OracleDataProvider))]
    public partial class DBPOLLDataContext : Devart.Data.Linq.DataContext
    {
        public static Devart.Data.Linq.CompiledQueryCache compiledQueryCache = Devart.Data.Linq.CompiledQueryCache.RegisterDataContext(typeof(DBPOLLDataContext));

        #region Extensibility Method Definitions
    
        partial void OnCreated();
        partial void OnSubmitError(Devart.Data.Linq.SubmitErrorEventArgs args);

        partial void InsertRESPONSE(RESPONSE instance);
        partial void UpdateRESPONSE(RESPONSE instance);
        partial void DeleteRESPONSE(RESPONSE instance);
        partial void InsertMESSAGE(MESSAGE instance);
        partial void UpdateMESSAGE(MESSAGE instance);
        partial void DeleteMESSAGE(MESSAGE instance);
        partial void InsertUSER(USER instance);
        partial void UpdateUSER(USER instance);
        partial void DeleteUSER(USER instance);
        partial void InsertPOLL(POLL instance);
        partial void UpdatePOLL(POLL instance);
        partial void DeletePOLL(POLL instance);
        partial void InsertSYSADMIN(SYSADMIN instance);
        partial void UpdateSYSADMIN(SYSADMIN instance);
        partial void DeleteSYSADMIN(SYSADMIN instance);
        partial void InsertMANAGEMENT(MANAGEMENT instance);
        partial void UpdateMANAGEMENT(MANAGEMENT instance);
        partial void DeleteMANAGEMENT(MANAGEMENT instance);
        partial void InsertQUESTION(QUESTION instance);
        partial void UpdateQUESTION(QUESTION instance);
        partial void DeleteQUESTION(QUESTION instance);
        partial void InsertOBJECT(OBJECT instance);
        partial void UpdateOBJECT(OBJECT instance);
        partial void DeleteOBJECT(OBJECT instance);
        partial void InsertANSWER(ANSWER instance);
        partial void UpdateANSWER(ANSWER instance);
        partial void DeleteANSWER(ANSWER instance);
        partial void InsertPARTICIPANT(PARTICIPANT instance);
        partial void UpdatePARTICIPANT(PARTICIPANT instance);
        partial void DeletePARTICIPANT(PARTICIPANT instance);

        #endregion

        public DBPOLLDataContext() :
        base(GetConnectionString("Models.DataContext1ConnectionString"), GetMappingSource())
        {
            OnCreated();
        }

        private static System.Data.Linq.Mapping.MappingSource GetMappingSource() 
        {
          return new Devart.Data.Linq.Mapping.AttributeMappingSource();
        }


        private static string GetConnectionString(string connectionStringName)
        {

            System.Configuration.ConnectionStringSettings connectionStringSettings = System.Configuration.ConfigurationManager.ConnectionStrings[connectionStringName];
            if (connectionStringSettings == null)
                throw new InvalidOperationException("Connection string \"" + connectionStringName +"\" could not be found in the configuration file.");
            return connectionStringSettings.ConnectionString;
        }

        public DBPOLLDataContext(string connection) :
            base(connection, GetMappingSource())
        {
          OnCreated();
        }

        public DBPOLLDataContext(System.Data.IDbConnection connection) :
            base(connection, GetMappingSource())
        {
          OnCreated();
        }

        public DBPOLLDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public DBPOLLDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public Devart.Data.Linq.Table<RESPONSE> RESPONSEs
        {
            get
            {
                return this.GetTable<RESPONSE>();
            }
        }

        public Devart.Data.Linq.Table<MESSAGE> MESSAGEs
        {
            get
            {
                return this.GetTable<MESSAGE>();
            }
        }

        public Devart.Data.Linq.Table<USER> USERs
        {
            get
            {
                return this.GetTable<USER>();
            }
        }

        public Devart.Data.Linq.Table<POLL> POLLs
        {
            get
            {
                return this.GetTable<POLL>();
            }
        }

        public Devart.Data.Linq.Table<SYSADMIN> SYSADMINs
        {
            get
            {
                return this.GetTable<SYSADMIN>();
            }
        }

        public Devart.Data.Linq.Table<MANAGEMENT> MANAGEMENTs
        {
            get
            {
                return this.GetTable<MANAGEMENT>();
            }
        }

        public Devart.Data.Linq.Table<QUESTION> QUESTIONs
        {
            get
            {
                return this.GetTable<QUESTION>();
            }
        }

        public Devart.Data.Linq.Table<OBJECT> OBJECTs
        {
            get
            {
                return this.GetTable<OBJECT>();
            }
        }

        public Devart.Data.Linq.Table<ANSWER> ANSWERs
        {
            get
            {
                return this.GetTable<ANSWER>();
            }
        }

        public Devart.Data.Linq.Table<PARTICIPANT> PARTICIPANTs
        {
            get
            {
                return this.GetTable<PARTICIPANT>();
            }
        }
    }


    /// <summary>
    /// There are no comments for RESPONSE in the schema.
    /// </summary>
    [Table(Name = @"CSSE3004GG.RESPONSES")]
    public partial class RESPONSE : INotifyPropertyChanging, INotifyPropertyChanged    
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);

        private int _RESPONSEID;

        private string _FEEDBACK;

        private System.DateTime _CREATEDAT;

        private System.Nullable<System.DateTime> _MODIFIEDAT;

        private int _USERID;

        private int _ANSWERID;

        private EntityRef<USER> _USER;

        private EntityRef<ANSWER> _ANSWER;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnRESPONSEIDChanging(int value);
        partial void OnRESPONSEIDChanged();
        partial void OnFEEDBACKChanging(string value);
        partial void OnFEEDBACKChanged();
        partial void OnCREATEDATChanging(System.DateTime value);
        partial void OnCREATEDATChanged();
        partial void OnMODIFIEDATChanging(System.Nullable<System.DateTime> value);
        partial void OnMODIFIEDATChanged();
        partial void OnUSERIDChanging(int value);
        partial void OnUSERIDChanged();
        partial void OnANSWERIDChanging(int value);
        partial void OnANSWERIDChanged();
        #endregion

        public RESPONSE()
        {
            this._USER  = default(EntityRef<USER>);
            this._ANSWER  = default(EntityRef<ANSWER>);
            OnCreated();
        }

    
    /// <summary>
    /// There are no comments for RESPONSEID in the schema.
    /// </summary>
        [Column(Name = @"RESPONSE_ID", Storage = "_RESPONSEID", CanBeNull = false, DbType = "NUMBER NOT NULL", IsPrimaryKey = true)]
        public int RESPONSEID
        {
            get
            {
                return this._RESPONSEID;
            }
            set
            {
                if (this._RESPONSEID != value)
                {
                    this.OnRESPONSEIDChanging(value);
                    this.SendPropertyChanging();
                    this._RESPONSEID = value;
                    this.SendPropertyChanged("RESPONSEID");
                    this.OnRESPONSEIDChanged();
                }
            }
        }

    
    /// <summary>
    /// There are no comments for FEEDBACK in the schema.
    /// </summary>
        [Column(Storage = "_FEEDBACK", CanBeNull = false, DbType = "VARCHAR2(256) NOT NULL")]
        public string FEEDBACK
        {
            get
            {
                return this._FEEDBACK;
            }
            set
            {
                if (this._FEEDBACK != value)
                {
                    this.OnFEEDBACKChanging(value);
                    this.SendPropertyChanging();
                    this._FEEDBACK = value;
                    this.SendPropertyChanged("FEEDBACK");
                    this.OnFEEDBACKChanged();
                }
            }
        }

    
    /// <summary>
    /// There are no comments for CREATEDAT in the schema.
    /// </summary>
        [Column(Name = @"CREATED_AT", Storage = "_CREATEDAT", CanBeNull = false, DbType = "DATE NOT NULL")]
        public System.DateTime CREATEDAT
        {
            get
            {
                return this._CREATEDAT;
            }
            set
            {
                if (this._CREATEDAT != value)
                {
                    this.OnCREATEDATChanging(value);
                    this.SendPropertyChanging();
                    this._CREATEDAT = value;
                    this.SendPropertyChanged("CREATEDAT");
                    this.OnCREATEDATChanged();
                }
            }
        }

    
    /// <summary>
    /// There are no comments for MODIFIEDAT in the schema.
    /// </summary>
        [Column(Name = @"MODIFIED_AT", Storage = "_MODIFIEDAT", DbType = "DATE NULL")]
        public System.Nullable<System.DateTime> MODIFIEDAT
        {
            get
            {
                return this._MODIFIEDAT;
            }
            set
            {
                if (this._MODIFIEDAT != value)
                {
                    this.OnMODIFIEDATChanging(value);
                    this.SendPropertyChanging();
                    this._MODIFIEDAT = value;
                    this.SendPropertyChanged("MODIFIEDAT");
                    this.OnMODIFIEDATChanged();
                }
            }
        }

    
    /// <summary>
    /// There are no comments for USERID in the schema.
    /// </summary>
        [Column(Name = @"USER_ID", Storage = "_USERID", CanBeNull = false, DbType = "NUMBER NOT NULL")]
        public int USERID
        {
            get
            {
                return this._USERID;
            }
            set
            {
                if (this._USERID != value)
                {
                    if (this._USER.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnUSERIDChanging(value);
                    this.SendPropertyChanging();
                    this._USERID = value;
                    this.SendPropertyChanged("USERID");
                    this.OnUSERIDChanged();
                }
            }
        }

    
    /// <summary>
    /// There are no comments for ANSWERID in the schema.
    /// </summary>
        [Column(Name = @"ANSWER_ID", Storage = "_ANSWERID", CanBeNull = false, DbType = "NUMBER NOT NULL")]
        public int ANSWERID
        {
            get
            {
                return this._ANSWERID;
            }
            set
            {
                if (this._ANSWERID != value)
                {
                    if (this._ANSWER.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnANSWERIDChanging(value);
                    this.SendPropertyChanging();
                    this._ANSWERID = value;
                    this.SendPropertyChanged("ANSWERID");
                    this.OnANSWERIDChanged();
                }
            }
        }

        [Devart.Data.Linq.Mapping.Association(Name="USER_RESPONSE", Storage="_USER", ThisKey="USERID", IsForeignKey=true)]
        public USER USER
        {
            get
            {
                return this._USER.Entity;
            }
            set
            {
                USER previousValue = this._USER.Entity;
                if ((previousValue != value) || (this._USER.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._USER.Entity = null;
                        previousValue.RESPONSEs.Remove(this);
                    }
                    this._USER.Entity = value;
                    if (value != null)
                    {
                        this._USERID = value.USERID;
                        value.RESPONSEs.Add(this);
                    }
                    else
                    {
                        this._USERID = default(int);
                    }
                    this.SendPropertyChanged("USER");
                }
            }
        }

        [Devart.Data.Linq.Mapping.Association(Name="ANSWER_RESPONSE", Storage="_ANSWER", ThisKey="ANSWERID", IsForeignKey=true)]
        public ANSWER ANSWER
        {
            get
            {
                return this._ANSWER.Entity;
            }
            set
            {
                ANSWER previousValue = this._ANSWER.Entity;
                if ((previousValue != value) || (this._ANSWER.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._ANSWER.Entity = null;
                        previousValue.RESPONSEs.Remove(this);
                    }
                    this._ANSWER.Entity = value;
                    if (value != null)
                    {
                        this._ANSWERID = value.ANSWERID;
                        value.RESPONSEs.Add(this);
                    }
                    else
                    {
                        this._ANSWERID = default(int);
                    }
                    this.SendPropertyChanged("ANSWER");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }


    /// <summary>
    /// There are no comments for MESSAGE in the schema.
    /// </summary>
    [Table(Name = @"CSSE3004GG.MESSAGES")]
    public partial class MESSAGE : INotifyPropertyChanging, INotifyPropertyChanged    
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);

        private int _MESSAGEID;

        private string _MESSAGE1;

        private int _CREATEDBY;

        private System.DateTime _CREATEDAT;

        private System.Nullable<System.DateTime> _MODIFIEDAT;

        private int _USERID;

        private int _POLLID;

        private EntityRef<USER> _USER;

        private EntityRef<POLL> _POLL;

        private EntityRef<USER> _USER1;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnMESSAGEIDChanging(int value);
        partial void OnMESSAGEIDChanged();
        partial void OnMESSAGE1Changing(string value);
        partial void OnMESSAGE1Changed();
        partial void OnCREATEDBYChanging(int value);
        partial void OnCREATEDBYChanged();
        partial void OnCREATEDATChanging(System.DateTime value);
        partial void OnCREATEDATChanged();
        partial void OnMODIFIEDATChanging(System.Nullable<System.DateTime> value);
        partial void OnMODIFIEDATChanged();
        partial void OnUSERIDChanging(int value);
        partial void OnUSERIDChanged();
        partial void OnPOLLIDChanging(int value);
        partial void OnPOLLIDChanged();
        #endregion

        public MESSAGE()
        {
            this._USER  = default(EntityRef<USER>);
            this._POLL  = default(EntityRef<POLL>);
            this._USER1  = default(EntityRef<USER>);
            OnCreated();
        }

    
    /// <summary>
    /// There are no comments for MESSAGEID in the schema.
    /// </summary>
        [Column(Name = @"MESSAGE_ID", Storage = "_MESSAGEID", CanBeNull = false, DbType = "NUMBER NOT NULL", IsPrimaryKey = true)]
        public int MESSAGEID
        {
            get
            {
                return this._MESSAGEID;
            }
            set
            {
                if (this._MESSAGEID != value)
                {
                    this.OnMESSAGEIDChanging(value);
                    this.SendPropertyChanging();
                    this._MESSAGEID = value;
                    this.SendPropertyChanged("MESSAGEID");
                    this.OnMESSAGEIDChanged();
                }
            }
        }

    
    /// <summary>
    /// There are no comments for MESSAGE1 in the schema.
    /// </summary>
        [Column(Name = @"MESSAGE", Storage = "_MESSAGE1", DbType = "VARCHAR2(256) NULL")]
        public string MESSAGE1
        {
            get
            {
                return this._MESSAGE1;
            }
            set
            {
                if (this._MESSAGE1 != value)
                {
                    this.OnMESSAGE1Changing(value);
                    this.SendPropertyChanging();
                    this._MESSAGE1 = value;
                    this.SendPropertyChanged("MESSAGE1");
                    this.OnMESSAGE1Changed();
                }
            }
        }

    
    /// <summary>
    /// There are no comments for CREATEDBY in the schema.
    /// </summary>
        [Column(Name = @"CREATED_BY", Storage = "_CREATEDBY", CanBeNull = false, DbType = "NUMBER NOT NULL")]
        public int CREATEDBY
        {
            get
            {
                return this._CREATEDBY;
            }
            set
            {
                if (this._CREATEDBY != value)
                {
                    if (this._USER1.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnCREATEDBYChanging(value);
                    this.SendPropertyChanging();
                    this._CREATEDBY = value;
                    this.SendPropertyChanged("CREATEDBY");
                    this.OnCREATEDBYChanged();
                }
            }
        }

    
    /// <summary>
    /// There are no comments for CREATEDAT in the schema.
    /// </summary>
        [Column(Name = @"CREATED_AT", Storage = "_CREATEDAT", CanBeNull = false, DbType = "DATE NOT NULL")]
        public System.DateTime CREATEDAT
        {
            get
            {
                return this._CREATEDAT;
            }
            set
            {
                if (this._CREATEDAT != value)
                {
                    this.OnCREATEDATChanging(value);
                    this.SendPropertyChanging();
                    this._CREATEDAT = value;
                    this.SendPropertyChanged("CREATEDAT");
                    this.OnCREATEDATChanged();
                }
            }
        }

    
    /// <summary>
    /// There are no comments for MODIFIEDAT in the schema.
    /// </summary>
        [Column(Name = @"MODIFIED_AT", Storage = "_MODIFIEDAT", DbType = "DATE NULL")]
        public System.Nullable<System.DateTime> MODIFIEDAT
        {
            get
            {
                return this._MODIFIEDAT;
            }
            set
            {
                if (this._MODIFIEDAT != value)
                {
                    this.OnMODIFIEDATChanging(value);
                    this.SendPropertyChanging();
                    this._MODIFIEDAT = value;
                    this.SendPropertyChanged("MODIFIEDAT");
                    this.OnMODIFIEDATChanged();
                }
            }
        }

    
    /// <summary>
    /// There are no comments for USERID in the schema.
    /// </summary>
        [Column(Name = @"USER_ID", Storage = "_USERID", CanBeNull = false, DbType = "NUMBER NOT NULL")]
        public int USERID
        {
            get
            {
                return this._USERID;
            }
            set
            {
                if (this._USERID != value)
                {
                    if (this._USER.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnUSERIDChanging(value);
                    this.SendPropertyChanging();
                    this._USERID = value;
                    this.SendPropertyChanged("USERID");
                    this.OnUSERIDChanged();
                }
            }
        }

    
    /// <summary>
    /// There are no comments for POLLID in the schema.
    /// </summary>
        [Column(Name = @"POLL_ID", Storage = "_POLLID", CanBeNull = false, DbType = "NUMBER NOT NULL")]
        public int POLLID
        {
            get
            {
                return this._POLLID;
            }
            set
            {
                if (this._POLLID != value)
                {
                    if (this._POLL.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnPOLLIDChanging(value);
                    this.SendPropertyChanging();
                    this._POLLID = value;
                    this.SendPropertyChanged("POLLID");
                    this.OnPOLLIDChanged();
                }
            }
        }

        [Devart.Data.Linq.Mapping.Association(Name="USER_MESSAGE", Storage="_USER", ThisKey="USERID", IsForeignKey=true)]
        public USER USER
        {
            get
            {
                return this._USER.Entity;
            }
            set
            {
                USER previousValue = this._USER.Entity;
                if ((previousValue != value) || (this._USER.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._USER.Entity = null;
                        previousValue.MESSAGEs.Remove(this);
                    }
                    this._USER.Entity = value;
                    if (value != null)
                    {
                        this._USERID = value.USERID;
                        value.MESSAGEs.Add(this);
                    }
                    else
                    {
                        this._USERID = default(int);
                    }
                    this.SendPropertyChanged("USER");
                }
            }
        }

        [Devart.Data.Linq.Mapping.Association(Name="POLL_MESSAGE", Storage="_POLL", ThisKey="POLLID", IsForeignKey=true)]
        public POLL POLL
        {
            get
            {
                return this._POLL.Entity;
            }
            set
            {
                POLL previousValue = this._POLL.Entity;
                if ((previousValue != value) || (this._POLL.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._POLL.Entity = null;
                        previousValue.MESSAGEs.Remove(this);
                    }
                    this._POLL.Entity = value;
                    if (value != null)
                    {
                        this._POLLID = value.POLLID;
                        value.MESSAGEs.Add(this);
                    }
                    else
                    {
                        this._POLLID = default(int);
                    }
                    this.SendPropertyChanged("POLL");
                }
            }
        }

        [Devart.Data.Linq.Mapping.Association(Name="USER_MESSAGE1", Storage="_USER1", ThisKey="CREATEDBY", IsForeignKey=true)]
        public USER USER1
        {
            get
            {
                return this._USER1.Entity;
            }
            set
            {
                USER previousValue = this._USER1.Entity;
                if ((previousValue != value) || (this._USER1.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._USER1.Entity = null;
                        previousValue.MESSAGEs1.Remove(this);
                    }
                    this._USER1.Entity = value;
                    if (value != null)
                    {
                        this._CREATEDBY = value.USERID;
                        value.MESSAGEs1.Add(this);
                    }
                    else
                    {
                        this._CREATEDBY = default(int);
                    }
                    this.SendPropertyChanged("USER1");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }


    /// <summary>
    /// There are no comments for USER in the schema.
    /// </summary>
    [Table(Name = @"CSSE3004GG.USERS")]
    public partial class USER : INotifyPropertyChanging, INotifyPropertyChanged    
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);

        private int _USERID;

        private decimal _USERTYPE;

        private string _NAME;

        private string _USERNAME;

        private string _PASSWORD;

        private string _SALT;

        private System.Nullable<System.DateTime> _EXPIRESAT;

        private System.Nullable<int> _CREATEDBY;

        private string _RESETPASSWORDKEY;

        private System.DateTime _CREATEDAT;

        private System.Nullable<System.DateTime> _MODIFIEDAT;

        private System.Nullable<int> _SYSADMINID;

        private EntitySet<RESPONSE> _RESPONSEs;

        private EntitySet<MESSAGE> _MESSAGEs;

        private EntitySet<MESSAGE> _MESSAGEs1;

        private EntityRef<SYSADMIN> _SYSADMIN;

        private EntitySet<USER> _USERs;

        private EntityRef<USER> _USER1;

        private EntitySet<POLL> _POLLs;

        private EntitySet<MANAGEMENT> _MANAGEMENTs;

        private EntitySet<PARTICIPANT> _PARTICIPANTs;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnUSERIDChanging(int value);
        partial void OnUSERIDChanged();
        partial void OnUSERTYPEChanging(decimal value);
        partial void OnUSERTYPEChanged();
        partial void OnNAMEChanging(string value);
        partial void OnNAMEChanged();
        partial void OnUSERNAMEChanging(string value);
        partial void OnUSERNAMEChanged();
        partial void OnPASSWORDChanging(string value);
        partial void OnPASSWORDChanged();
        partial void OnSALTChanging(string value);
        partial void OnSALTChanged();
        partial void OnEXPIRESATChanging(System.Nullable<System.DateTime> value);
        partial void OnEXPIRESATChanged();
        partial void OnCREATEDBYChanging(System.Nullable<int> value);
        partial void OnCREATEDBYChanged();
        partial void OnRESETPASSWORDKEYChanging(string value);
        partial void OnRESETPASSWORDKEYChanged();
        partial void OnCREATEDATChanging(System.DateTime value);
        partial void OnCREATEDATChanged();
        partial void OnMODIFIEDATChanging(System.Nullable<System.DateTime> value);
        partial void OnMODIFIEDATChanged();
        partial void OnSYSADMINIDChanging(System.Nullable<int> value);
        partial void OnSYSADMINIDChanged();
        #endregion

        public USER()
        {
            this._RESPONSEs = new EntitySet<RESPONSE>(new Action<RESPONSE>(this.attach_RESPONSEs), new Action<RESPONSE>(this.detach_RESPONSEs));
            this._MESSAGEs = new EntitySet<MESSAGE>(new Action<MESSAGE>(this.attach_MESSAGEs), new Action<MESSAGE>(this.detach_MESSAGEs));
            this._MESSAGEs1 = new EntitySet<MESSAGE>(new Action<MESSAGE>(this.attach_MESSAGEs1), new Action<MESSAGE>(this.detach_MESSAGEs1));
            this._SYSADMIN  = default(EntityRef<SYSADMIN>);
            this._USERs = new EntitySet<USER>(new Action<USER>(this.attach_USERs), new Action<USER>(this.detach_USERs));
            this._USER1  = default(EntityRef<USER>);
            this._POLLs = new EntitySet<POLL>(new Action<POLL>(this.attach_POLLs), new Action<POLL>(this.detach_POLLs));
            this._MANAGEMENTs = new EntitySet<MANAGEMENT>(new Action<MANAGEMENT>(this.attach_MANAGEMENTs), new Action<MANAGEMENT>(this.detach_MANAGEMENTs));
            this._PARTICIPANTs = new EntitySet<PARTICIPANT>(new Action<PARTICIPANT>(this.attach_PARTICIPANTs), new Action<PARTICIPANT>(this.detach_PARTICIPANTs));
            OnCreated();
        }

    
    /// <summary>
    /// There are no comments for USERID in the schema.
    /// </summary>
        [Column(Name = @"USER_ID", Storage = "_USERID", CanBeNull = false, DbType = "NUMBER NOT NULL", IsPrimaryKey = true)]
        public int USERID
        {
            get
            {
                return this._USERID;
            }
            set
            {
                if (this._USERID != value)
                {
                    this.OnUSERIDChanging(value);
                    this.SendPropertyChanging();
                    this._USERID = value;
                    this.SendPropertyChanged("USERID");
                    this.OnUSERIDChanged();
                }
            }
        }

    
    /// <summary>
    /// There are no comments for USERTYPE in the schema.
    /// </summary>
        [Column(Name = @"USER_TYPE", Storage = "_USERTYPE", CanBeNull = false, DbType = "NUMBER NOT NULL")]
        public decimal USERTYPE
        {
            get
            {
                return this._USERTYPE;
            }
            set
            {
                if (this._USERTYPE != value)
                {
                    this.OnUSERTYPEChanging(value);
                    this.SendPropertyChanging();
                    this._USERTYPE = value;
                    this.SendPropertyChanged("USERTYPE");
                    this.OnUSERTYPEChanged();
                }
            }
        }

    
    /// <summary>
    /// There are no comments for NAME in the schema.
    /// </summary>
        [Column(Storage = "_NAME", DbType = "VARCHAR2(64) NULL")]
        public string NAME
        {
            get
            {
                return this._NAME;
            }
            set
            {
                if (this._NAME != value)
                {
                    this.OnNAMEChanging(value);
                    this.SendPropertyChanging();
                    this._NAME = value;
                    this.SendPropertyChanged("NAME");
                    this.OnNAMEChanged();
                }
            }
        }

    
    /// <summary>
    /// There are no comments for USERNAME in the schema.
    /// </summary>
        [Column(Storage = "_USERNAME", DbType = "VARCHAR2(64) NULL")]
        public string USERNAME
        {
            get
            {
                return this._USERNAME;
            }
            set
            {
                if (this._USERNAME != value)
                {
                    this.OnUSERNAMEChanging(value);
                    this.SendPropertyChanging();
                    this._USERNAME = value;
                    this.SendPropertyChanged("USERNAME");
                    this.OnUSERNAMEChanged();
                }
            }
        }

    
    /// <summary>
    /// There are no comments for PASSWORD in the schema.
    /// </summary>
        [Column(Storage = "_PASSWORD", DbType = "VARCHAR2(64) NULL")]
        public string PASSWORD
        {
            get
            {
                return this._PASSWORD;
            }
            set
            {
                if (this._PASSWORD != value)
                {
                    this.OnPASSWORDChanging(value);
                    this.SendPropertyChanging();
                    this._PASSWORD = value;
                    this.SendPropertyChanged("PASSWORD");
                    this.OnPASSWORDChanged();
                }
            }
        }

    
    /// <summary>
    /// There are no comments for SALT in the schema.
    /// </summary>
        [Column(Storage = "_SALT", DbType = "VARCHAR2(16) NULL")]
        public string SALT
        {
            get
            {
                return this._SALT;
            }
            set
            {
                if (this._SALT != value)
                {
                    this.OnSALTChanging(value);
                    this.SendPropertyChanging();
                    this._SALT = value;
                    this.SendPropertyChanged("SALT");
                    this.OnSALTChanged();
                }
            }
        }

    
    /// <summary>
    /// There are no comments for EXPIRESAT in the schema.
    /// </summary>
        [Column(Name = @"EXPIRES_AT", Storage = "_EXPIRESAT", DbType = "DATE NULL")]
        public System.Nullable<System.DateTime> EXPIRESAT
        {
            get
            {
                return this._EXPIRESAT;
            }
            set
            {
                if (this._EXPIRESAT != value)
                {
                    this.OnEXPIRESATChanging(value);
                    this.SendPropertyChanging();
                    this._EXPIRESAT = value;
                    this.SendPropertyChanged("EXPIRESAT");
                    this.OnEXPIRESATChanged();
                }
            }
        }

    
    /// <summary>
    /// There are no comments for CREATEDBY in the schema.
    /// </summary>
        [Column(Name = @"CREATED_BY", Storage = "_CREATEDBY", DbType = "NUMBER NULL")]
        public System.Nullable<int> CREATEDBY
        {
            get
            {
                return this._CREATEDBY;
            }
            set
            {
                if (this._CREATEDBY != value)
                {
                    if (this._USER1.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnCREATEDBYChanging(value);
                    this.SendPropertyChanging();
                    this._CREATEDBY = value;
                    this.SendPropertyChanged("CREATEDBY");
                    this.OnCREATEDBYChanged();
                }
            }
        }

    
    /// <summary>
    /// There are no comments for RESETPASSWORDKEY in the schema.
    /// </summary>
        [Column(Name = @"RESET_PASSWORD_KEY", Storage = "_RESETPASSWORDKEY", DbType = "VARCHAR2(16) NULL")]
        public string RESETPASSWORDKEY
        {
            get
            {
                return this._RESETPASSWORDKEY;
            }
            set
            {
                if (this._RESETPASSWORDKEY != value)
                {
                    this.OnRESETPASSWORDKEYChanging(value);
                    this.SendPropertyChanging();
                    this._RESETPASSWORDKEY = value;
                    this.SendPropertyChanged("RESETPASSWORDKEY");
                    this.OnRESETPASSWORDKEYChanged();
                }
            }
        }

    
    /// <summary>
    /// There are no comments for CREATEDAT in the schema.
    /// </summary>
        [Column(Name = @"CREATED_AT", Storage = "_CREATEDAT", CanBeNull = false, DbType = "DATE NOT NULL")]
        public System.DateTime CREATEDAT
        {
            get
            {
                return this._CREATEDAT;
            }
            set
            {
                if (this._CREATEDAT != value)
                {
                    this.OnCREATEDATChanging(value);
                    this.SendPropertyChanging();
                    this._CREATEDAT = value;
                    this.SendPropertyChanged("CREATEDAT");
                    this.OnCREATEDATChanged();
                }
            }
        }

    
    /// <summary>
    /// There are no comments for MODIFIEDAT in the schema.
    /// </summary>
        [Column(Name = @"MODIFIED_AT", Storage = "_MODIFIEDAT", DbType = "DATE NULL")]
        public System.Nullable<System.DateTime> MODIFIEDAT
        {
            get
            {
                return this._MODIFIEDAT;
            }
            set
            {
                if (this._MODIFIEDAT != value)
                {
                    this.OnMODIFIEDATChanging(value);
                    this.SendPropertyChanging();
                    this._MODIFIEDAT = value;
                    this.SendPropertyChanged("MODIFIEDAT");
                    this.OnMODIFIEDATChanged();
                }
            }
        }

    
    /// <summary>
    /// There are no comments for SYSADMINID in the schema.
    /// </summary>
        [Column(Name = @"SYSADMIN_ID", Storage = "_SYSADMINID", DbType = "NUMBER NULL")]
        public System.Nullable<int> SYSADMINID
        {
            get
            {
                return this._SYSADMINID;
            }
            set
            {
                if (this._SYSADMINID != value)
                {
                    if (this._SYSADMIN.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnSYSADMINIDChanging(value);
                    this.SendPropertyChanging();
                    this._SYSADMINID = value;
                    this.SendPropertyChanged("SYSADMINID");
                    this.OnSYSADMINIDChanged();
                }
            }
        }

        [Devart.Data.Linq.Mapping.Association(Name="USER_RESPONSE", Storage="_RESPONSEs", OtherKey="USERID")]
        public EntitySet<RESPONSE> RESPONSEs
        {
            get
            {
                return this._RESPONSEs;
            }
            set
            {
                this._RESPONSEs.Assign(value);
            }
        }

        [Devart.Data.Linq.Mapping.Association(Name="USER_MESSAGE", Storage="_MESSAGEs", OtherKey="USERID")]
        public EntitySet<MESSAGE> MESSAGEs
        {
            get
            {
                return this._MESSAGEs;
            }
            set
            {
                this._MESSAGEs.Assign(value);
            }
        }

        [Devart.Data.Linq.Mapping.Association(Name="USER_MESSAGE1", Storage="_MESSAGEs1", OtherKey="CREATEDBY")]
        public EntitySet<MESSAGE> MESSAGEs1
        {
            get
            {
                return this._MESSAGEs1;
            }
            set
            {
                this._MESSAGEs1.Assign(value);
            }
        }

        [Devart.Data.Linq.Mapping.Association(Name="SYSADMIN_USER", Storage="_SYSADMIN", ThisKey="SYSADMINID", IsForeignKey=true)]
        public SYSADMIN SYSADMIN
        {
            get
            {
                return this._SYSADMIN.Entity;
            }
            set
            {
                SYSADMIN previousValue = this._SYSADMIN.Entity;
                if ((previousValue != value) || (this._SYSADMIN.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._SYSADMIN.Entity = null;
                        previousValue.USERs.Remove(this);
                    }
                    this._SYSADMIN.Entity = value;
                    if (value != null)
                    {
                        this._SYSADMINID = value.SYSADMINSID;
                        value.USERs.Add(this);
                    }
                    else
                    {
                        this._SYSADMINID = default(System.Nullable<int>);
                    }
                    this.SendPropertyChanged("SYSADMIN");
                }
            }
        }

        [Devart.Data.Linq.Mapping.Association(Name="USER_USER", Storage="_USERs", OtherKey="CREATEDBY")]
        public EntitySet<USER> USERs
        {
            get
            {
                return this._USERs;
            }
            set
            {
                this._USERs.Assign(value);
            }
        }

        [Devart.Data.Linq.Mapping.Association(Name="USER_USER", Storage="_USER1", ThisKey="CREATEDBY", IsForeignKey=true)]
        public USER USER1
        {
            get
            {
                return this._USER1.Entity;
            }
            set
            {
                USER previousValue = this._USER1.Entity;
                if ((previousValue != value) || (this._USER1.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._USER1.Entity = null;
                        previousValue.USERs.Remove(this);
                    }
                    this._USER1.Entity = value;
                    if (value != null)
                    {
                        this._CREATEDBY = value.USERID;
                        value.USERs.Add(this);
                    }
                    else
                    {
                        this._CREATEDBY = default(System.Nullable<int>);
                    }
                    this.SendPropertyChanged("USER1");
                }
            }
        }

        [Devart.Data.Linq.Mapping.Association(Name="USER_POLL", Storage="_POLLs", OtherKey="CREATEDBY")]
        public EntitySet<POLL> POLLs
        {
            get
            {
                return this._POLLs;
            }
            set
            {
                this._POLLs.Assign(value);
            }
        }

        [Devart.Data.Linq.Mapping.Association(Name="USER_MANAGEMENT", Storage="_MANAGEMENTs", OtherKey="USERID")]
        public EntitySet<MANAGEMENT> MANAGEMENTs
        {
            get
            {
                return this._MANAGEMENTs;
            }
            set
            {
                this._MANAGEMENTs.Assign(value);
            }
        }

        [Devart.Data.Linq.Mapping.Association(Name="USER_PARTICIPANT", Storage="_PARTICIPANTs", OtherKey="USERID")]
        public EntitySet<PARTICIPANT> PARTICIPANTs
        {
            get
            {
                return this._PARTICIPANTs;
            }
            set
            {
                this._PARTICIPANTs.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_RESPONSEs(RESPONSE entity)
        {
            this.SendPropertyChanging("RESPONSEs");
            entity.USER = this;
        }
    
        private void detach_RESPONSEs(RESPONSE entity)
        {
            this.SendPropertyChanging("RESPONSEs");
            entity.USER = null;
        }

        private void attach_MESSAGEs(MESSAGE entity)
        {
            this.SendPropertyChanging("MESSAGEs");
            entity.USER = this;
        }
    
        private void detach_MESSAGEs(MESSAGE entity)
        {
            this.SendPropertyChanging("MESSAGEs");
            entity.USER = null;
        }

        private void attach_MESSAGEs1(MESSAGE entity)
        {
            this.SendPropertyChanging("MESSAGEs1");
            entity.USER1 = this;
        }
    
        private void detach_MESSAGEs1(MESSAGE entity)
        {
            this.SendPropertyChanging("MESSAGEs1");
            entity.USER1 = null;
        }

        private void attach_USERs(USER entity)
        {
            this.SendPropertyChanging("USERs");
            entity.USER1 = this;
        }
    
        private void detach_USERs(USER entity)
        {
            this.SendPropertyChanging("USERs");
            entity.USER1 = null;
        }

        private void attach_POLLs(POLL entity)
        {
            this.SendPropertyChanging("POLLs");
            entity.USER = this;
        }
    
        private void detach_POLLs(POLL entity)
        {
            this.SendPropertyChanging("POLLs");
            entity.USER = null;
        }

        private void attach_MANAGEMENTs(MANAGEMENT entity)
        {
            this.SendPropertyChanging("MANAGEMENTs");
            entity.USER = this;
        }
    
        private void detach_MANAGEMENTs(MANAGEMENT entity)
        {
            this.SendPropertyChanging("MANAGEMENTs");
            entity.USER = null;
        }

        private void attach_PARTICIPANTs(PARTICIPANT entity)
        {
            this.SendPropertyChanging("PARTICIPANTs");
            entity.USER = this;
        }
    
        private void detach_PARTICIPANTs(PARTICIPANT entity)
        {
            this.SendPropertyChanging("PARTICIPANTs");
            entity.USER = null;
        }
    }


    /// <summary>
    /// There are no comments for POLL in the schema.
    /// </summary>
    [Table(Name = @"CSSE3004GG.POLLS")]
    public partial class POLL : INotifyPropertyChanging, INotifyPropertyChanged    
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);

        private int _POLLID;

        private string _POLLNAME;

        private float _LONGITUDE;

        private float _LATITUDE;

        private int _CREATEDBY;

        private System.Nullable<System.DateTime> _EXPIRESAT;

        private System.DateTime _CREATEDAT;

        private System.Nullable<System.DateTime> _MODIFIEDAT;

        private EntitySet<MESSAGE> _MESSAGEs;

        private EntityRef<USER> _USER;

        private EntitySet<MANAGEMENT> _MANAGEMENTs;

        private EntitySet<QUESTION> _QUESTIONs;

        private EntitySet<PARTICIPANT> _PARTICIPANTs;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnPOLLIDChanging(int value);
        partial void OnPOLLIDChanged();
        partial void OnPOLLNAMEChanging(string value);
        partial void OnPOLLNAMEChanged();
        partial void OnLONGITUDEChanging(float value);
        partial void OnLONGITUDEChanged();
        partial void OnLATITUDEChanging(float value);
        partial void OnLATITUDEChanged();
        partial void OnCREATEDBYChanging(int value);
        partial void OnCREATEDBYChanged();
        partial void OnEXPIRESATChanging(System.Nullable<System.DateTime> value);
        partial void OnEXPIRESATChanged();
        partial void OnCREATEDATChanging(System.DateTime value);
        partial void OnCREATEDATChanged();
        partial void OnMODIFIEDATChanging(System.Nullable<System.DateTime> value);
        partial void OnMODIFIEDATChanged();
        #endregion

        public POLL()
        {
            this._MESSAGEs = new EntitySet<MESSAGE>(new Action<MESSAGE>(this.attach_MESSAGEs), new Action<MESSAGE>(this.detach_MESSAGEs));
            this._USER  = default(EntityRef<USER>);
            this._MANAGEMENTs = new EntitySet<MANAGEMENT>(new Action<MANAGEMENT>(this.attach_MANAGEMENTs), new Action<MANAGEMENT>(this.detach_MANAGEMENTs));
            this._QUESTIONs = new EntitySet<QUESTION>(new Action<QUESTION>(this.attach_QUESTIONs), new Action<QUESTION>(this.detach_QUESTIONs));
            this._PARTICIPANTs = new EntitySet<PARTICIPANT>(new Action<PARTICIPANT>(this.attach_PARTICIPANTs), new Action<PARTICIPANT>(this.detach_PARTICIPANTs));
            OnCreated();
        }

    
    /// <summary>
    /// There are no comments for POLLID in the schema.
    /// </summary>
        [Column(Name = @"POLL_ID", Storage = "_POLLID", CanBeNull = false, DbType = "NUMBER NOT NULL", IsPrimaryKey = true)]
        public int POLLID
        {
            get
            {
                return this._POLLID;
            }
            set
            {
                if (this._POLLID != value)
                {
                    this.OnPOLLIDChanging(value);
                    this.SendPropertyChanging();
                    this._POLLID = value;
                    this.SendPropertyChanged("POLLID");
                    this.OnPOLLIDChanged();
                }
            }
        }

    
    /// <summary>
    /// There are no comments for POLLNAME in the schema.
    /// </summary>
        [Column(Name = @"POLL_NAME", Storage = "_POLLNAME", DbType = "VARCHAR2(256) NULL")]
        public string POLLNAME
        {
            get
            {
                return this._POLLNAME;
            }
            set
            {
                if (this._POLLNAME != value)
                {
                    this.OnPOLLNAMEChanging(value);
                    this.SendPropertyChanging();
                    this._POLLNAME = value;
                    this.SendPropertyChanged("POLLNAME");
                    this.OnPOLLNAMEChanged();
                }
            }
        }

    
    /// <summary>
    /// There are no comments for LONGITUDE in the schema.
    /// </summary>
        [Column(Storage = "_LONGITUDE", CanBeNull = false, DbType = "FLOAT(126) NOT NULL")]
        public float LONGITUDE
        {
            get
            {
                return this._LONGITUDE;
            }
            set
            {
                if (this._LONGITUDE != value)
                {
                    this.OnLONGITUDEChanging(value);
                    this.SendPropertyChanging();
                    this._LONGITUDE = value;
                    this.SendPropertyChanged("LONGITUDE");
                    this.OnLONGITUDEChanged();
                }
            }
        }

    
    /// <summary>
    /// There are no comments for LATITUDE in the schema.
    /// </summary>
        [Column(Storage = "_LATITUDE", CanBeNull = false, DbType = "FLOAT(126) NOT NULL")]
        public float LATITUDE
        {
            get
            {
                return this._LATITUDE;
            }
            set
            {
                if (this._LATITUDE != value)
                {
                    this.OnLATITUDEChanging(value);
                    this.SendPropertyChanging();
                    this._LATITUDE = value;
                    this.SendPropertyChanged("LATITUDE");
                    this.OnLATITUDEChanged();
                }
            }
        }

    
    /// <summary>
    /// There are no comments for CREATEDBY in the schema.
    /// </summary>
        [Column(Name = @"CREATED_BY", Storage = "_CREATEDBY", CanBeNull = false, DbType = "NUMBER NOT NULL")]
        public int CREATEDBY
        {
            get
            {
                return this._CREATEDBY;
            }
            set
            {
                if (this._CREATEDBY != value)
                {
                    if (this._USER.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnCREATEDBYChanging(value);
                    this.SendPropertyChanging();
                    this._CREATEDBY = value;
                    this.SendPropertyChanged("CREATEDBY");
                    this.OnCREATEDBYChanged();
                }
            }
        }

    
    /// <summary>
    /// There are no comments for EXPIRESAT in the schema.
    /// </summary>
        [Column(Name = @"EXPIRES_AT", Storage = "_EXPIRESAT", DbType = "DATE NULL")]
        public System.Nullable<System.DateTime> EXPIRESAT
        {
            get
            {
                return this._EXPIRESAT;
            }
            set
            {
                if (this._EXPIRESAT != value)
                {
                    this.OnEXPIRESATChanging(value);
                    this.SendPropertyChanging();
                    this._EXPIRESAT = value;
                    this.SendPropertyChanged("EXPIRESAT");
                    this.OnEXPIRESATChanged();
                }
            }
        }

    
    /// <summary>
    /// There are no comments for CREATEDAT in the schema.
    /// </summary>
        [Column(Name = @"CREATED_AT", Storage = "_CREATEDAT", CanBeNull = false, DbType = "DATE NOT NULL")]
        public System.DateTime CREATEDAT
        {
            get
            {
                return this._CREATEDAT;
            }
            set
            {
                if (this._CREATEDAT != value)
                {
                    this.OnCREATEDATChanging(value);
                    this.SendPropertyChanging();
                    this._CREATEDAT = value;
                    this.SendPropertyChanged("CREATEDAT");
                    this.OnCREATEDATChanged();
                }
            }
        }

    
    /// <summary>
    /// There are no comments for MODIFIEDAT in the schema.
    /// </summary>
        [Column(Name = @"MODIFIED_AT", Storage = "_MODIFIEDAT", DbType = "DATE NULL")]
        public System.Nullable<System.DateTime> MODIFIEDAT
        {
            get
            {
                return this._MODIFIEDAT;
            }
            set
            {
                if (this._MODIFIEDAT != value)
                {
                    this.OnMODIFIEDATChanging(value);
                    this.SendPropertyChanging();
                    this._MODIFIEDAT = value;
                    this.SendPropertyChanged("MODIFIEDAT");
                    this.OnMODIFIEDATChanged();
                }
            }
        }

        [Devart.Data.Linq.Mapping.Association(Name="POLL_MESSAGE", Storage="_MESSAGEs", OtherKey="POLLID", DeleteRule="CASCADE")]
        public EntitySet<MESSAGE> MESSAGEs
        {
            get
            {
                return this._MESSAGEs;
            }
            set
            {
                this._MESSAGEs.Assign(value);
            }
        }

        [Devart.Data.Linq.Mapping.Association(Name="USER_POLL", Storage="_USER", ThisKey="CREATEDBY", IsForeignKey=true)]
        public USER USER
        {
            get
            {
                return this._USER.Entity;
            }
            set
            {
                USER previousValue = this._USER.Entity;
                if ((previousValue != value) || (this._USER.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._USER.Entity = null;
                        previousValue.POLLs.Remove(this);
                    }
                    this._USER.Entity = value;
                    if (value != null)
                    {
                        this._CREATEDBY = value.USERID;
                        value.POLLs.Add(this);
                    }
                    else
                    {
                        this._CREATEDBY = default(int);
                    }
                    this.SendPropertyChanged("USER");
                }
            }
        }

        [Devart.Data.Linq.Mapping.Association(Name="POLL_MANAGEMENT", Storage="_MANAGEMENTs", OtherKey="POLLID", DeleteRule="CASCADE")]
        public EntitySet<MANAGEMENT> MANAGEMENTs
        {
            get
            {
                return this._MANAGEMENTs;
            }
            set
            {
                this._MANAGEMENTs.Assign(value);
            }
        }

        [Devart.Data.Linq.Mapping.Association(Name="POLL_QUESTION", Storage="_QUESTIONs", OtherKey="POLLID", DeleteRule="CASCADE")]
        public EntitySet<QUESTION> QUESTIONs
        {
            get
            {
                return this._QUESTIONs;
            }
            set
            {
                this._QUESTIONs.Assign(value);
            }
        }

        [Devart.Data.Linq.Mapping.Association(Name="POLL_PARTICIPANT", Storage="_PARTICIPANTs", OtherKey="POLLID", DeleteRule="CASCADE")]
        public EntitySet<PARTICIPANT> PARTICIPANTs
        {
            get
            {
                return this._PARTICIPANTs;
            }
            set
            {
                this._PARTICIPANTs.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_MESSAGEs(MESSAGE entity)
        {
            this.SendPropertyChanging("MESSAGEs");
            entity.POLL = this;
        }
    
        private void detach_MESSAGEs(MESSAGE entity)
        {
            this.SendPropertyChanging("MESSAGEs");
            entity.POLL = null;
        }

        private void attach_MANAGEMENTs(MANAGEMENT entity)
        {
            this.SendPropertyChanging("MANAGEMENTs");
            entity.POLL = this;
        }
    
        private void detach_MANAGEMENTs(MANAGEMENT entity)
        {
            this.SendPropertyChanging("MANAGEMENTs");
            entity.POLL = null;
        }

        private void attach_QUESTIONs(QUESTION entity)
        {
            this.SendPropertyChanging("QUESTIONs");
            entity.POLL = this;
        }
    
        private void detach_QUESTIONs(QUESTION entity)
        {
            this.SendPropertyChanging("QUESTIONs");
            entity.POLL = null;
        }

        private void attach_PARTICIPANTs(PARTICIPANT entity)
        {
            this.SendPropertyChanging("PARTICIPANTs");
            entity.POLL = this;
        }
    
        private void detach_PARTICIPANTs(PARTICIPANT entity)
        {
            this.SendPropertyChanging("PARTICIPANTs");
            entity.POLL = null;
        }
    }


    /// <summary>
    /// There are no comments for SYSADMIN in the schema.
    /// </summary>
    [Table(Name = @"CSSE3004GG.SYSADMINS")]
    public partial class SYSADMIN : INotifyPropertyChanging, INotifyPropertyChanged    
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);

        private int _SYSADMINSID;

        private string _NAME;

        private string _USERNAME;

        private string _PASSWORD;

        private string _SALT;

        private System.DateTime _CREATEDAT;

        private EntitySet<USER> _USERs;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnSYSADMINSIDChanging(int value);
        partial void OnSYSADMINSIDChanged();
        partial void OnNAMEChanging(string value);
        partial void OnNAMEChanged();
        partial void OnUSERNAMEChanging(string value);
        partial void OnUSERNAMEChanged();
        partial void OnPASSWORDChanging(string value);
        partial void OnPASSWORDChanged();
        partial void OnSALTChanging(string value);
        partial void OnSALTChanged();
        partial void OnCREATEDATChanging(System.DateTime value);
        partial void OnCREATEDATChanged();
        #endregion

        public SYSADMIN()
        {
            this._USERs = new EntitySet<USER>(new Action<USER>(this.attach_USERs), new Action<USER>(this.detach_USERs));
            OnCreated();
        }

    
    /// <summary>
    /// There are no comments for SYSADMINSID in the schema.
    /// </summary>
        [Column(Name = @"SYSADMINS_ID", Storage = "_SYSADMINSID", CanBeNull = false, DbType = "NUMBER NOT NULL", IsPrimaryKey = true)]
        public int SYSADMINSID
        {
            get
            {
                return this._SYSADMINSID;
            }
            set
            {
                if (this._SYSADMINSID != value)
                {
                    this.OnSYSADMINSIDChanging(value);
                    this.SendPropertyChanging();
                    this._SYSADMINSID = value;
                    this.SendPropertyChanged("SYSADMINSID");
                    this.OnSYSADMINSIDChanged();
                }
            }
        }

    
    /// <summary>
    /// There are no comments for NAME in the schema.
    /// </summary>
        [Column(Storage = "_NAME", CanBeNull = false, DbType = "VARCHAR2(30) NOT NULL")]
        public string NAME
        {
            get
            {
                return this._NAME;
            }
            set
            {
                if (this._NAME != value)
                {
                    this.OnNAMEChanging(value);
                    this.SendPropertyChanging();
                    this._NAME = value;
                    this.SendPropertyChanged("NAME");
                    this.OnNAMEChanged();
                }
            }
        }

    
    /// <summary>
    /// There are no comments for USERNAME in the schema.
    /// </summary>
        [Column(Storage = "_USERNAME", DbType = "VARCHAR2(30) NULL")]
        public string USERNAME
        {
            get
            {
                return this._USERNAME;
            }
            set
            {
                if (this._USERNAME != value)
                {
                    this.OnUSERNAMEChanging(value);
                    this.SendPropertyChanging();
                    this._USERNAME = value;
                    this.SendPropertyChanged("USERNAME");
                    this.OnUSERNAMEChanged();
                }
            }
        }

    
    /// <summary>
    /// There are no comments for PASSWORD in the schema.
    /// </summary>
        [Column(Storage = "_PASSWORD", DbType = "VARCHAR2(30) NULL")]
        public string PASSWORD
        {
            get
            {
                return this._PASSWORD;
            }
            set
            {
                if (this._PASSWORD != value)
                {
                    this.OnPASSWORDChanging(value);
                    this.SendPropertyChanging();
                    this._PASSWORD = value;
                    this.SendPropertyChanged("PASSWORD");
                    this.OnPASSWORDChanged();
                }
            }
        }

    
    /// <summary>
    /// There are no comments for SALT in the schema.
    /// </summary>
        [Column(Storage = "_SALT", DbType = "VARCHAR2(16) NULL")]
        public string SALT
        {
            get
            {
                return this._SALT;
            }
            set
            {
                if (this._SALT != value)
                {
                    this.OnSALTChanging(value);
                    this.SendPropertyChanging();
                    this._SALT = value;
                    this.SendPropertyChanged("SALT");
                    this.OnSALTChanged();
                }
            }
        }

    
    /// <summary>
    /// There are no comments for CREATEDAT in the schema.
    /// </summary>
        [Column(Name = @"CREATED_AT", Storage = "_CREATEDAT", CanBeNull = false, DbType = "DATE NOT NULL")]
        public System.DateTime CREATEDAT
        {
            get
            {
                return this._CREATEDAT;
            }
            set
            {
                if (this._CREATEDAT != value)
                {
                    this.OnCREATEDATChanging(value);
                    this.SendPropertyChanging();
                    this._CREATEDAT = value;
                    this.SendPropertyChanged("CREATEDAT");
                    this.OnCREATEDATChanged();
                }
            }
        }

        [Devart.Data.Linq.Mapping.Association(Name="SYSADMIN_USER", Storage="_USERs", OtherKey="SYSADMINID")]
        public EntitySet<USER> USERs
        {
            get
            {
                return this._USERs;
            }
            set
            {
                this._USERs.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_USERs(USER entity)
        {
            this.SendPropertyChanging("USERs");
            entity.SYSADMIN = this;
        }
    
        private void detach_USERs(USER entity)
        {
            this.SendPropertyChanging("USERs");
            entity.SYSADMIN = null;
        }
    }


    /// <summary>
    /// There are no comments for MANAGEMENT in the schema.
    /// </summary>
    [Table(Name = @"CSSE3004GG.MANAGEMENTS")]
    public partial class MANAGEMENT : INotifyPropertyChanging, INotifyPropertyChanged    
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);

        private int _USERID;

        private int _POLLID;

        private System.DateTime _CREATEDAT;

        private System.Nullable<System.DateTime> _MODIFIEDAT;

        private EntityRef<USER> _USER;

        private EntityRef<POLL> _POLL;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnUSERIDChanging(int value);
        partial void OnUSERIDChanged();
        partial void OnPOLLIDChanging(int value);
        partial void OnPOLLIDChanged();
        partial void OnCREATEDATChanging(System.DateTime value);
        partial void OnCREATEDATChanged();
        partial void OnMODIFIEDATChanging(System.Nullable<System.DateTime> value);
        partial void OnMODIFIEDATChanged();
        #endregion

        public MANAGEMENT()
        {
            this._USER  = default(EntityRef<USER>);
            this._POLL  = default(EntityRef<POLL>);
            OnCreated();
        }

    
    /// <summary>
    /// There are no comments for USERID in the schema.
    /// </summary>
        [Column(Name = @"USER_ID", Storage = "_USERID", CanBeNull = false, DbType = "NUMBER NOT NULL", IsPrimaryKey = true)]
        public int USERID
        {
            get
            {
                return this._USERID;
            }
            set
            {
                if (this._USERID != value)
                {
                    if (this._USER.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnUSERIDChanging(value);
                    this.SendPropertyChanging();
                    this._USERID = value;
                    this.SendPropertyChanged("USERID");
                    this.OnUSERIDChanged();
                }
            }
        }

    
    /// <summary>
    /// There are no comments for POLLID in the schema.
    /// </summary>
        [Column(Name = @"POLL_ID", Storage = "_POLLID", CanBeNull = false, DbType = "NUMBER NOT NULL", IsPrimaryKey = true)]
        public int POLLID
        {
            get
            {
                return this._POLLID;
            }
            set
            {
                if (this._POLLID != value)
                {
                    if (this._POLL.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnPOLLIDChanging(value);
                    this.SendPropertyChanging();
                    this._POLLID = value;
                    this.SendPropertyChanged("POLLID");
                    this.OnPOLLIDChanged();
                }
            }
        }

    
    /// <summary>
    /// There are no comments for CREATEDAT in the schema.
    /// </summary>
        [Column(Name = @"CREATED_AT", Storage = "_CREATEDAT", CanBeNull = false, DbType = "DATE NOT NULL")]
        public System.DateTime CREATEDAT
        {
            get
            {
                return this._CREATEDAT;
            }
            set
            {
                if (this._CREATEDAT != value)
                {
                    this.OnCREATEDATChanging(value);
                    this.SendPropertyChanging();
                    this._CREATEDAT = value;
                    this.SendPropertyChanged("CREATEDAT");
                    this.OnCREATEDATChanged();
                }
            }
        }

    
    /// <summary>
    /// There are no comments for MODIFIEDAT in the schema.
    /// </summary>
        [Column(Name = @"MODIFIED_AT", Storage = "_MODIFIEDAT", DbType = "DATE NULL")]
        public System.Nullable<System.DateTime> MODIFIEDAT
        {
            get
            {
                return this._MODIFIEDAT;
            }
            set
            {
                if (this._MODIFIEDAT != value)
                {
                    this.OnMODIFIEDATChanging(value);
                    this.SendPropertyChanging();
                    this._MODIFIEDAT = value;
                    this.SendPropertyChanged("MODIFIEDAT");
                    this.OnMODIFIEDATChanged();
                }
            }
        }

        [Devart.Data.Linq.Mapping.Association(Name="USER_MANAGEMENT", Storage="_USER", ThisKey="USERID", IsForeignKey=true)]
        public USER USER
        {
            get
            {
                return this._USER.Entity;
            }
            set
            {
                USER previousValue = this._USER.Entity;
                if ((previousValue != value) || (this._USER.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._USER.Entity = null;
                        previousValue.MANAGEMENTs.Remove(this);
                    }
                    this._USER.Entity = value;
                    if (value != null)
                    {
                        this._USERID = value.USERID;
                        value.MANAGEMENTs.Add(this);
                    }
                    else
                    {
                        this._USERID = default(int);
                    }
                    this.SendPropertyChanged("USER");
                }
            }
        }

        [Devart.Data.Linq.Mapping.Association(Name="POLL_MANAGEMENT", Storage="_POLL", ThisKey="POLLID", IsForeignKey=true)]
        public POLL POLL
        {
            get
            {
                return this._POLL.Entity;
            }
            set
            {
                POLL previousValue = this._POLL.Entity;
                if ((previousValue != value) || (this._POLL.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._POLL.Entity = null;
                        previousValue.MANAGEMENTs.Remove(this);
                    }
                    this._POLL.Entity = value;
                    if (value != null)
                    {
                        this._POLLID = value.POLLID;
                        value.MANAGEMENTs.Add(this);
                    }
                    else
                    {
                        this._POLLID = default(int);
                    }
                    this.SendPropertyChanged("POLL");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }


    /// <summary>
    /// There are no comments for QUESTION in the schema.
    /// </summary>
    [Table(Name = @"CSSE3004GG.QUESTIONS")]
    public partial class QUESTION : INotifyPropertyChanging, INotifyPropertyChanged    
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);

        private int _QUESTIONID;

        private int _QUESTIONTYPE;

        private string _QUESTION1;

        private System.Nullable<decimal> _NUMBEROFRESPONSES;

        private System.Nullable<decimal> _CHARTSTYLE;

        private System.Nullable<decimal> _SHORTANSWERTYPE;

        private int _NUM;

        private System.DateTime _CREATEDAT;

        private System.Nullable<System.DateTime> _MODIFIEDAT;

        private int _POLLID;

        private EntityRef<POLL> _POLL;

        private EntitySet<OBJECT> _OBJECTs;

        private EntitySet<ANSWER> _ANSWERs;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnQUESTIONIDChanging(int value);
        partial void OnQUESTIONIDChanged();
        partial void OnQUESTIONTYPEChanging(int value);
        partial void OnQUESTIONTYPEChanged();
        partial void OnQUESTION1Changing(string value);
        partial void OnQUESTION1Changed();
        partial void OnNUMBEROFRESPONSESChanging(System.Nullable<decimal> value);
        partial void OnNUMBEROFRESPONSESChanged();
        partial void OnCHARTSTYLEChanging(System.Nullable<decimal> value);
        partial void OnCHARTSTYLEChanged();
        partial void OnSHORTANSWERTYPEChanging(System.Nullable<decimal> value);
        partial void OnSHORTANSWERTYPEChanged();
        partial void OnNUMChanging(int value);
        partial void OnNUMChanged();
        partial void OnCREATEDATChanging(System.DateTime value);
        partial void OnCREATEDATChanged();
        partial void OnMODIFIEDATChanging(System.Nullable<System.DateTime> value);
        partial void OnMODIFIEDATChanged();
        partial void OnPOLLIDChanging(int value);
        partial void OnPOLLIDChanged();
        #endregion

        public QUESTION()
        {
            this._POLL  = default(EntityRef<POLL>);
            this._OBJECTs = new EntitySet<OBJECT>(new Action<OBJECT>(this.attach_OBJECTs), new Action<OBJECT>(this.detach_OBJECTs));
            this._ANSWERs = new EntitySet<ANSWER>(new Action<ANSWER>(this.attach_ANSWERs), new Action<ANSWER>(this.detach_ANSWERs));
            OnCreated();
        }

    
    /// <summary>
    /// There are no comments for QUESTIONID in the schema.
    /// </summary>
        [Column(Name = @"QUESTION_ID", Storage = "_QUESTIONID", CanBeNull = false, DbType = "NUMBER NOT NULL", IsPrimaryKey = true)]
        public int QUESTIONID
        {
            get
            {
                return this._QUESTIONID;
            }
            set
            {
                if (this._QUESTIONID != value)
                {
                    this.OnQUESTIONIDChanging(value);
                    this.SendPropertyChanging();
                    this._QUESTIONID = value;
                    this.SendPropertyChanged("QUESTIONID");
                    this.OnQUESTIONIDChanged();
                }
            }
        }

    
    /// <summary>
    /// There are no comments for QUESTIONTYPE in the schema.
    /// </summary>
        [Column(Name = @"QUESTION_TYPE", Storage = "_QUESTIONTYPE", CanBeNull = false, DbType = "NUMBER NOT NULL")]
        public int QUESTIONTYPE
        {
            get
            {
                return this._QUESTIONTYPE;
            }
            set
            {
                if (this._QUESTIONTYPE != value)
                {
                    this.OnQUESTIONTYPEChanging(value);
                    this.SendPropertyChanging();
                    this._QUESTIONTYPE = value;
                    this.SendPropertyChanged("QUESTIONTYPE");
                    this.OnQUESTIONTYPEChanged();
                }
            }
        }

    
    /// <summary>
    /// There are no comments for QUESTION1 in the schema.
    /// </summary>
        [Column(Name = @"QUESTION", Storage = "_QUESTION1", CanBeNull = false, DbType = "VARCHAR2(256) NOT NULL")]
        public string QUESTION1
        {
            get
            {
                return this._QUESTION1;
            }
            set
            {
                if (this._QUESTION1 != value)
                {
                    this.OnQUESTION1Changing(value);
                    this.SendPropertyChanging();
                    this._QUESTION1 = value;
                    this.SendPropertyChanged("QUESTION1");
                    this.OnQUESTION1Changed();
                }
            }
        }

    
    /// <summary>
    /// There are no comments for NUMBEROFRESPONSES in the schema.
    /// </summary>
        [Column(Name = @"NUMBER_OF_RESPONSES", Storage = "_NUMBEROFRESPONSES", DbType = "NUMBER NULL")]
        public System.Nullable<decimal> NUMBEROFRESPONSES
        {
            get
            {
                return this._NUMBEROFRESPONSES;
            }
            set
            {
                if (this._NUMBEROFRESPONSES != value)
                {
                    this.OnNUMBEROFRESPONSESChanging(value);
                    this.SendPropertyChanging();
                    this._NUMBEROFRESPONSES = value;
                    this.SendPropertyChanged("NUMBEROFRESPONSES");
                    this.OnNUMBEROFRESPONSESChanged();
                }
            }
        }

    
    /// <summary>
    /// There are no comments for CHARTSTYLE in the schema.
    /// </summary>
        [Column(Name = @"CHART_STYLE", Storage = "_CHARTSTYLE", DbType = "NUMBER NULL")]
        public System.Nullable<decimal> CHARTSTYLE
        {
            get
            {
                return this._CHARTSTYLE;
            }
            set
            {
                if (this._CHARTSTYLE != value)
                {
                    this.OnCHARTSTYLEChanging(value);
                    this.SendPropertyChanging();
                    this._CHARTSTYLE = value;
                    this.SendPropertyChanged("CHARTSTYLE");
                    this.OnCHARTSTYLEChanged();
                }
            }
        }

    
    /// <summary>
    /// There are no comments for SHORTANSWERTYPE in the schema.
    /// </summary>
        [Column(Name = @"SHORT_ANSWER_TYPE", Storage = "_SHORTANSWERTYPE", DbType = "NUMBER NULL")]
        public System.Nullable<decimal> SHORTANSWERTYPE
        {
            get
            {
                return this._SHORTANSWERTYPE;
            }
            set
            {
                if (this._SHORTANSWERTYPE != value)
                {
                    this.OnSHORTANSWERTYPEChanging(value);
                    this.SendPropertyChanging();
                    this._SHORTANSWERTYPE = value;
                    this.SendPropertyChanged("SHORTANSWERTYPE");
                    this.OnSHORTANSWERTYPEChanged();
                }
            }
        }

    
    /// <summary>
    /// There are no comments for NUM in the schema.
    /// </summary>
        [Column(Storage = "_NUM", CanBeNull = false, DbType = "NUMBER NULL")]
        public int NUM
        {
            get
            {
                return this._NUM;
            }
            set
            {
                if (this._NUM != value)
                {
                    this.OnNUMChanging(value);
                    this.SendPropertyChanging();
                    this._NUM = value;
                    this.SendPropertyChanged("NUM");
                    this.OnNUMChanged();
                }
            }
        }

    
    /// <summary>
    /// There are no comments for CREATEDAT in the schema.
    /// </summary>
        [Column(Name = @"CREATED_AT", Storage = "_CREATEDAT", CanBeNull = false, DbType = "DATE NOT NULL")]
        public System.DateTime CREATEDAT
        {
            get
            {
                return this._CREATEDAT;
            }
            set
            {
                if (this._CREATEDAT != value)
                {
                    this.OnCREATEDATChanging(value);
                    this.SendPropertyChanging();
                    this._CREATEDAT = value;
                    this.SendPropertyChanged("CREATEDAT");
                    this.OnCREATEDATChanged();
                }
            }
        }

    
    /// <summary>
    /// There are no comments for MODIFIEDAT in the schema.
    /// </summary>
        [Column(Name = @"MODIFIED_AT", Storage = "_MODIFIEDAT", DbType = "DATE NULL")]
        public System.Nullable<System.DateTime> MODIFIEDAT
        {
            get
            {
                return this._MODIFIEDAT;
            }
            set
            {
                if (this._MODIFIEDAT != value)
                {
                    this.OnMODIFIEDATChanging(value);
                    this.SendPropertyChanging();
                    this._MODIFIEDAT = value;
                    this.SendPropertyChanged("MODIFIEDAT");
                    this.OnMODIFIEDATChanged();
                }
            }
        }

    
    /// <summary>
    /// There are no comments for POLLID in the schema.
    /// </summary>
        [Column(Name = @"POLL_ID", Storage = "_POLLID", CanBeNull = false, DbType = "NUMBER NOT NULL")]
        public int POLLID
        {
            get
            {
                return this._POLLID;
            }
            set
            {
                if (this._POLLID != value)
                {
                    if (this._POLL.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnPOLLIDChanging(value);
                    this.SendPropertyChanging();
                    this._POLLID = value;
                    this.SendPropertyChanged("POLLID");
                    this.OnPOLLIDChanged();
                }
            }
        }

        [Devart.Data.Linq.Mapping.Association(Name="POLL_QUESTION", Storage="_POLL", ThisKey="POLLID", IsForeignKey=true)]
        public POLL POLL
        {
            get
            {
                return this._POLL.Entity;
            }
            set
            {
                POLL previousValue = this._POLL.Entity;
                if ((previousValue != value) || (this._POLL.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._POLL.Entity = null;
                        previousValue.QUESTIONs.Remove(this);
                    }
                    this._POLL.Entity = value;
                    if (value != null)
                    {
                        this._POLLID = value.POLLID;
                        value.QUESTIONs.Add(this);
                    }
                    else
                    {
                        this._POLLID = default(int);
                    }
                    this.SendPropertyChanged("POLL");
                }
            }
        }

        [Devart.Data.Linq.Mapping.Association(Name="QUESTION_OBJECT", Storage="_OBJECTs", OtherKey="QUESTIONID", DeleteRule="CASCADE")]
        public EntitySet<OBJECT> OBJECTs
        {
            get
            {
                return this._OBJECTs;
            }
            set
            {
                this._OBJECTs.Assign(value);
            }
        }

        [Devart.Data.Linq.Mapping.Association(Name="QUESTION_ANSWER", Storage="_ANSWERs", OtherKey="QUESTIONID", DeleteRule="CASCADE")]
        public EntitySet<ANSWER> ANSWERs
        {
            get
            {
                return this._ANSWERs;
            }
            set
            {
                this._ANSWERs.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_OBJECTs(OBJECT entity)
        {
            this.SendPropertyChanging("OBJECTs");
            entity.QUESTION = this;
        }
    
        private void detach_OBJECTs(OBJECT entity)
        {
            this.SendPropertyChanging("OBJECTs");
            entity.QUESTION = null;
        }

        private void attach_ANSWERs(ANSWER entity)
        {
            this.SendPropertyChanging("ANSWERs");
            entity.QUESTION = this;
        }
    
        private void detach_ANSWERs(ANSWER entity)
        {
            this.SendPropertyChanging("ANSWERs");
            entity.QUESTION = null;
        }
    }


    /// <summary>
    /// There are no comments for OBJECT in the schema.
    /// </summary>
    [Table(Name = @"CSSE3004GG.OBJECTS")]
    public partial class OBJECT : INotifyPropertyChanging, INotifyPropertyChanged    
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);

        private int _OBJID;

        private decimal _OBJTYPE;

        private string _ATTRIBUTE;

        private int _QUESTIONID;

        private EntityRef<QUESTION> _QUESTION;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnOBJIDChanging(int value);
        partial void OnOBJIDChanged();
        partial void OnOBJTYPEChanging(decimal value);
        partial void OnOBJTYPEChanged();
        partial void OnATTRIBUTEChanging(string value);
        partial void OnATTRIBUTEChanged();
        partial void OnQUESTIONIDChanging(int value);
        partial void OnQUESTIONIDChanged();
        #endregion

        public OBJECT()
        {
            this._QUESTION  = default(EntityRef<QUESTION>);
            OnCreated();
        }

    
    /// <summary>
    /// There are no comments for OBJID in the schema.
    /// </summary>
        [Column(Name = @"OBJ_ID", Storage = "_OBJID", CanBeNull = false, DbType = "NUMBER NOT NULL", IsPrimaryKey = true)]
        public int OBJID
        {
            get
            {
                return this._OBJID;
            }
            set
            {
                if (this._OBJID != value)
                {
                    this.OnOBJIDChanging(value);
                    this.SendPropertyChanging();
                    this._OBJID = value;
                    this.SendPropertyChanged("OBJID");
                    this.OnOBJIDChanged();
                }
            }
        }

    
    /// <summary>
    /// There are no comments for OBJTYPE in the schema.
    /// </summary>
        [Column(Name = @"OBJ_TYPE", Storage = "_OBJTYPE", CanBeNull = false, DbType = "NUMBER NOT NULL")]
        public decimal OBJTYPE
        {
            get
            {
                return this._OBJTYPE;
            }
            set
            {
                if (this._OBJTYPE != value)
                {
                    this.OnOBJTYPEChanging(value);
                    this.SendPropertyChanging();
                    this._OBJTYPE = value;
                    this.SendPropertyChanged("OBJTYPE");
                    this.OnOBJTYPEChanged();
                }
            }
        }

    
    /// <summary>
    /// There are no comments for ATTRIBUTE in the schema.
    /// </summary>
        [Column(Storage = "_ATTRIBUTE", CanBeNull = false, DbType = "VARCHAR2(64) NOT NULL")]
        public string ATTRIBUTE
        {
            get
            {
                return this._ATTRIBUTE;
            }
            set
            {
                if (this._ATTRIBUTE != value)
                {
                    this.OnATTRIBUTEChanging(value);
                    this.SendPropertyChanging();
                    this._ATTRIBUTE = value;
                    this.SendPropertyChanged("ATTRIBUTE");
                    this.OnATTRIBUTEChanged();
                }
            }
        }

    
    /// <summary>
    /// There are no comments for QUESTIONID in the schema.
    /// </summary>
        [Column(Name = @"QUESTION_ID", Storage = "_QUESTIONID", CanBeNull = false, DbType = "NUMBER NOT NULL")]
        public int QUESTIONID
        {
            get
            {
                return this._QUESTIONID;
            }
            set
            {
                if (this._QUESTIONID != value)
                {
                    if (this._QUESTION.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnQUESTIONIDChanging(value);
                    this.SendPropertyChanging();
                    this._QUESTIONID = value;
                    this.SendPropertyChanged("QUESTIONID");
                    this.OnQUESTIONIDChanged();
                }
            }
        }

        [Devart.Data.Linq.Mapping.Association(Name="QUESTION_OBJECT", Storage="_QUESTION", ThisKey="QUESTIONID", IsForeignKey=true)]
        public QUESTION QUESTION
        {
            get
            {
                return this._QUESTION.Entity;
            }
            set
            {
                QUESTION previousValue = this._QUESTION.Entity;
                if ((previousValue != value) || (this._QUESTION.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._QUESTION.Entity = null;
                        previousValue.OBJECTs.Remove(this);
                    }
                    this._QUESTION.Entity = value;
                    if (value != null)
                    {
                        this._QUESTIONID = value.QUESTIONID;
                        value.OBJECTs.Add(this);
                    }
                    else
                    {
                        this._QUESTIONID = default(int);
                    }
                    this.SendPropertyChanged("QUESTION");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }


    /// <summary>
    /// There are no comments for ANSWER in the schema.
    /// </summary>
    [Table(Name = @"CSSE3004GG.ANSWERS")]
    public partial class ANSWER : INotifyPropertyChanging, INotifyPropertyChanged    
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);

        private int _ANSWERID;

        private string _ANSWER1;

        private System.Nullable<int> _CORRECT;

        private System.Nullable<decimal> _WEIGHT;

        private System.Nullable<int> _NUM;

        private System.Nullable<int> _UPDATEDTO;

        private System.DateTime _CREATEDAT;

        private System.Nullable<System.DateTime> _MODIFIEDAT;

        private int _QUESTIONID;

        private EntitySet<RESPONSE> _RESPONSEs;

        private EntityRef<QUESTION> _QUESTION;

        private EntitySet<ANSWER> _ANSWERs;

        private EntityRef<ANSWER> _ANSWER2;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnANSWERIDChanging(int value);
        partial void OnANSWERIDChanged();
        partial void OnANSWER1Changing(string value);
        partial void OnANSWER1Changed();
        partial void OnCORRECTChanging(System.Nullable<int> value);
        partial void OnCORRECTChanged();
        partial void OnWEIGHTChanging(System.Nullable<decimal> value);
        partial void OnWEIGHTChanged();
        partial void OnNUMChanging(System.Nullable<int> value);
        partial void OnNUMChanged();
        partial void OnUPDATEDTOChanging(System.Nullable<int> value);
        partial void OnUPDATEDTOChanged();
        partial void OnCREATEDATChanging(System.DateTime value);
        partial void OnCREATEDATChanged();
        partial void OnMODIFIEDATChanging(System.Nullable<System.DateTime> value);
        partial void OnMODIFIEDATChanged();
        partial void OnQUESTIONIDChanging(int value);
        partial void OnQUESTIONIDChanged();
        #endregion

        public ANSWER()
        {
            this._RESPONSEs = new EntitySet<RESPONSE>(new Action<RESPONSE>(this.attach_RESPONSEs), new Action<RESPONSE>(this.detach_RESPONSEs));
            this._QUESTION  = default(EntityRef<QUESTION>);
            this._ANSWERs = new EntitySet<ANSWER>(new Action<ANSWER>(this.attach_ANSWERs), new Action<ANSWER>(this.detach_ANSWERs));
            this._ANSWER2  = default(EntityRef<ANSWER>);
            OnCreated();
        }

    
    /// <summary>
    /// There are no comments for ANSWERID in the schema.
    /// </summary>
        [Column(Name = @"ANSWER_ID", Storage = "_ANSWERID", CanBeNull = false, DbType = "NUMBER NOT NULL", IsPrimaryKey = true)]
        public int ANSWERID
        {
            get
            {
                return this._ANSWERID;
            }
            set
            {
                if (this._ANSWERID != value)
                {
                    this.OnANSWERIDChanging(value);
                    this.SendPropertyChanging();
                    this._ANSWERID = value;
                    this.SendPropertyChanged("ANSWERID");
                    this.OnANSWERIDChanged();
                }
            }
        }

    
    /// <summary>
    /// There are no comments for ANSWER1 in the schema.
    /// </summary>
        [Column(Name = @"ANSWER", Storage = "_ANSWER1", CanBeNull = false, DbType = "VARCHAR2(256) NOT NULL")]
        public string ANSWER1
        {
            get
            {
                return this._ANSWER1;
            }
            set
            {
                if (this._ANSWER1 != value)
                {
                    this.OnANSWER1Changing(value);
                    this.SendPropertyChanging();
                    this._ANSWER1 = value;
                    this.SendPropertyChanged("ANSWER1");
                    this.OnANSWER1Changed();
                }
            }
        }

    
    /// <summary>
    /// There are no comments for CORRECT in the schema.
    /// </summary>
        [Column(Storage = "_CORRECT", DbType = "NUMBER NULL")]
        public System.Nullable<int> CORRECT
        {
            get
            {
                return this._CORRECT;
            }
            set
            {
                if (this._CORRECT != value)
                {
                    this.OnCORRECTChanging(value);
                    this.SendPropertyChanging();
                    this._CORRECT = value;
                    this.SendPropertyChanged("CORRECT");
                    this.OnCORRECTChanged();
                }
            }
        }

    
    /// <summary>
    /// There are no comments for WEIGHT in the schema.
    /// </summary>
        [Column(Storage = "_WEIGHT", DbType = "NUMBER NULL")]
        public System.Nullable<decimal> WEIGHT
        {
            get
            {
                return this._WEIGHT;
            }
            set
            {
                if (this._WEIGHT != value)
                {
                    this.OnWEIGHTChanging(value);
                    this.SendPropertyChanging();
                    this._WEIGHT = value;
                    this.SendPropertyChanged("WEIGHT");
                    this.OnWEIGHTChanged();
                }
            }
        }

    
    /// <summary>
    /// There are no comments for NUM in the schema.
    /// </summary>
        [Column(Storage = "_NUM", DbType = "NUMBER NULL")]
        public System.Nullable<int> NUM
        {
            get
            {
                return this._NUM;
            }
            set
            {
                if (this._NUM != value)
                {
                    this.OnNUMChanging(value);
                    this.SendPropertyChanging();
                    this._NUM = value;
                    this.SendPropertyChanged("NUM");
                    this.OnNUMChanged();
                }
            }
        }

    
    /// <summary>
    /// There are no comments for UPDATEDTO in the schema.
    /// </summary>
        [Column(Name = @"UPDATED_TO", Storage = "_UPDATEDTO", DbType = "NUMBER NULL")]
        public System.Nullable<int> UPDATEDTO
        {
            get
            {
                return this._UPDATEDTO;
            }
            set
            {
                if (this._UPDATEDTO != value)
                {
                    if (this._ANSWER2.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnUPDATEDTOChanging(value);
                    this.SendPropertyChanging();
                    this._UPDATEDTO = value;
                    this.SendPropertyChanged("UPDATEDTO");
                    this.OnUPDATEDTOChanged();
                }
            }
        }

    
    /// <summary>
    /// There are no comments for CREATEDAT in the schema.
    /// </summary>
        [Column(Name = @"CREATED_AT", Storage = "_CREATEDAT", CanBeNull = false, DbType = "DATE NOT NULL")]
        public System.DateTime CREATEDAT
        {
            get
            {
                return this._CREATEDAT;
            }
            set
            {
                if (this._CREATEDAT != value)
                {
                    this.OnCREATEDATChanging(value);
                    this.SendPropertyChanging();
                    this._CREATEDAT = value;
                    this.SendPropertyChanged("CREATEDAT");
                    this.OnCREATEDATChanged();
                }
            }
        }

    
    /// <summary>
    /// There are no comments for MODIFIEDAT in the schema.
    /// </summary>
        [Column(Name = @"MODIFIED_AT", Storage = "_MODIFIEDAT", DbType = "DATE NULL")]
        public System.Nullable<System.DateTime> MODIFIEDAT
        {
            get
            {
                return this._MODIFIEDAT;
            }
            set
            {
                if (this._MODIFIEDAT != value)
                {
                    this.OnMODIFIEDATChanging(value);
                    this.SendPropertyChanging();
                    this._MODIFIEDAT = value;
                    this.SendPropertyChanged("MODIFIEDAT");
                    this.OnMODIFIEDATChanged();
                }
            }
        }

    
    /// <summary>
    /// There are no comments for QUESTIONID in the schema.
    /// </summary>
        [Column(Name = @"QUESTION_ID", Storage = "_QUESTIONID", CanBeNull = false, DbType = "NUMBER NOT NULL")]
        public int QUESTIONID
        {
            get
            {
                return this._QUESTIONID;
            }
            set
            {
                if (this._QUESTIONID != value)
                {
                    if (this._QUESTION.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnQUESTIONIDChanging(value);
                    this.SendPropertyChanging();
                    this._QUESTIONID = value;
                    this.SendPropertyChanged("QUESTIONID");
                    this.OnQUESTIONIDChanged();
                }
            }
        }

        [Devart.Data.Linq.Mapping.Association(Name="ANSWER_RESPONSE", Storage="_RESPONSEs", OtherKey="ANSWERID", DeleteRule="CASCADE")]
        public EntitySet<RESPONSE> RESPONSEs
        {
            get
            {
                return this._RESPONSEs;
            }
            set
            {
                this._RESPONSEs.Assign(value);
            }
        }

        [Devart.Data.Linq.Mapping.Association(Name="QUESTION_ANSWER", Storage="_QUESTION", ThisKey="QUESTIONID", IsForeignKey=true)]
        public QUESTION QUESTION
        {
            get
            {
                return this._QUESTION.Entity;
            }
            set
            {
                QUESTION previousValue = this._QUESTION.Entity;
                if ((previousValue != value) || (this._QUESTION.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._QUESTION.Entity = null;
                        previousValue.ANSWERs.Remove(this);
                    }
                    this._QUESTION.Entity = value;
                    if (value != null)
                    {
                        this._QUESTIONID = value.QUESTIONID;
                        value.ANSWERs.Add(this);
                    }
                    else
                    {
                        this._QUESTIONID = default(int);
                    }
                    this.SendPropertyChanged("QUESTION");
                }
            }
        }

        [Devart.Data.Linq.Mapping.Association(Name="ANSWER_ANSWER", Storage="_ANSWERs", OtherKey="UPDATEDTO", DeleteRule="CASCADE")]
        public EntitySet<ANSWER> ANSWERs
        {
            get
            {
                return this._ANSWERs;
            }
            set
            {
                this._ANSWERs.Assign(value);
            }
        }

        [Devart.Data.Linq.Mapping.Association(Name="ANSWER_ANSWER", Storage="_ANSWER2", ThisKey="UPDATEDTO", IsForeignKey=true)]
        public ANSWER ANSWER2
        {
            get
            {
                return this._ANSWER2.Entity;
            }
            set
            {
                ANSWER previousValue = this._ANSWER2.Entity;
                if ((previousValue != value) || (this._ANSWER2.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._ANSWER2.Entity = null;
                        previousValue.ANSWERs.Remove(this);
                    }
                    this._ANSWER2.Entity = value;
                    if (value != null)
                    {
                        this._UPDATEDTO = value.ANSWERID;
                        value.ANSWERs.Add(this);
                    }
                    else
                    {
                        this._UPDATEDTO = default(System.Nullable<int>);
                    }
                    this.SendPropertyChanged("ANSWER2");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_RESPONSEs(RESPONSE entity)
        {
            this.SendPropertyChanging("RESPONSEs");
            entity.ANSWER = this;
        }
    
        private void detach_RESPONSEs(RESPONSE entity)
        {
            this.SendPropertyChanging("RESPONSEs");
            entity.ANSWER = null;
        }

        private void attach_ANSWERs(ANSWER entity)
        {
            this.SendPropertyChanging("ANSWERs");
            entity.ANSWER2 = this;
        }
    
        private void detach_ANSWERs(ANSWER entity)
        {
            this.SendPropertyChanging("ANSWERs");
            entity.ANSWER2 = null;
        }
    }


    /// <summary>
    /// There are no comments for PARTICIPANT in the schema.
    /// </summary>
    [Table(Name = @"CSSE3004GG.PARTICIPANTS")]
    public partial class PARTICIPANT : INotifyPropertyChanging, INotifyPropertyChanged    
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);

        private System.DateTime _CREATEDAT;

        private System.Nullable<System.DateTime> _MODIFIEDAT;

        private int _USERID;

        private int _POLLID;

        private EntityRef<USER> _USER;

        private EntityRef<POLL> _POLL;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnCREATEDATChanging(System.DateTime value);
        partial void OnCREATEDATChanged();
        partial void OnMODIFIEDATChanging(System.Nullable<System.DateTime> value);
        partial void OnMODIFIEDATChanged();
        partial void OnUSERIDChanging(int value);
        partial void OnUSERIDChanged();
        partial void OnPOLLIDChanging(int value);
        partial void OnPOLLIDChanged();
        #endregion

        public PARTICIPANT()
        {
            this._USER  = default(EntityRef<USER>);
            this._POLL  = default(EntityRef<POLL>);
            OnCreated();
        }

    
    /// <summary>
    /// There are no comments for CREATEDAT in the schema.
    /// </summary>
        [Column(Name = @"CREATED_AT", Storage = "_CREATEDAT", CanBeNull = false, DbType = "DATE NOT NULL")]
        public System.DateTime CREATEDAT
        {
            get
            {
                return this._CREATEDAT;
            }
            set
            {
                if (this._CREATEDAT != value)
                {
                    this.OnCREATEDATChanging(value);
                    this.SendPropertyChanging();
                    this._CREATEDAT = value;
                    this.SendPropertyChanged("CREATEDAT");
                    this.OnCREATEDATChanged();
                }
            }
        }

    
    /// <summary>
    /// There are no comments for MODIFIEDAT in the schema.
    /// </summary>
        [Column(Name = @"MODIFIED_AT", Storage = "_MODIFIEDAT", DbType = "DATE NULL")]
        public System.Nullable<System.DateTime> MODIFIEDAT
        {
            get
            {
                return this._MODIFIEDAT;
            }
            set
            {
                if (this._MODIFIEDAT != value)
                {
                    this.OnMODIFIEDATChanging(value);
                    this.SendPropertyChanging();
                    this._MODIFIEDAT = value;
                    this.SendPropertyChanged("MODIFIEDAT");
                    this.OnMODIFIEDATChanged();
                }
            }
        }

    
    /// <summary>
    /// There are no comments for USERID in the schema.
    /// </summary>
        [Column(Name = @"USER_ID", Storage = "_USERID", CanBeNull = false, DbType = "NUMBER NOT NULL", IsPrimaryKey = true)]
        public int USERID
        {
            get
            {
                return this._USERID;
            }
            set
            {
                if (this._USERID != value)
                {
                    if (this._USER.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnUSERIDChanging(value);
                    this.SendPropertyChanging();
                    this._USERID = value;
                    this.SendPropertyChanged("USERID");
                    this.OnUSERIDChanged();
                }
            }
        }

    
    /// <summary>
    /// There are no comments for POLLID in the schema.
    /// </summary>
        [Column(Name = @"POLL_ID", Storage = "_POLLID", CanBeNull = false, DbType = "NUMBER NOT NULL", IsPrimaryKey = true)]
        public int POLLID
        {
            get
            {
                return this._POLLID;
            }
            set
            {
                if (this._POLLID != value)
                {
                    if (this._POLL.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnPOLLIDChanging(value);
                    this.SendPropertyChanging();
                    this._POLLID = value;
                    this.SendPropertyChanged("POLLID");
                    this.OnPOLLIDChanged();
                }
            }
        }

        [Devart.Data.Linq.Mapping.Association(Name="USER_PARTICIPANT", Storage="_USER", ThisKey="USERID", IsForeignKey=true)]
        public USER USER
        {
            get
            {
                return this._USER.Entity;
            }
            set
            {
                USER previousValue = this._USER.Entity;
                if ((previousValue != value) || (this._USER.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._USER.Entity = null;
                        previousValue.PARTICIPANTs.Remove(this);
                    }
                    this._USER.Entity = value;
                    if (value != null)
                    {
                        this._USERID = value.USERID;
                        value.PARTICIPANTs.Add(this);
                    }
                    else
                    {
                        this._USERID = default(int);
                    }
                    this.SendPropertyChanged("USER");
                }
            }
        }

        [Devart.Data.Linq.Mapping.Association(Name="POLL_PARTICIPANT", Storage="_POLL", ThisKey="POLLID", IsForeignKey=true)]
        public POLL POLL
        {
            get
            {
                return this._POLL.Entity;
            }
            set
            {
                POLL previousValue = this._POLL.Entity;
                if ((previousValue != value) || (this._POLL.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._POLL.Entity = null;
                        previousValue.PARTICIPANTs.Remove(this);
                    }
                    this._POLL.Entity = value;
                    if (value != null)
                    {
                        this._POLLID = value.POLLID;
                        value.PARTICIPANTs.Add(this);
                    }
                    else
                    {
                        this._POLLID = default(int);
                    }
                    this.SendPropertyChanged("POLL");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }
}
